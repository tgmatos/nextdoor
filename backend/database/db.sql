CREATE TABLE ADDRESS
(
        ID UUID PRIMARY KEY,
        ADDRESS_NUMBER VARCHAR(10) NOT NULL,
        STREET VARCHAR(256) NOT NULL,
        NEIGHBORHOOD VARCHAR(256) NOT NULL,
        CEP VARCHAR(8) NOT NULL
);

CREATE TABLE ACCOUNT
(
	ID UUID PRIMARY KEY,
	EMAIL VARCHAR(256) UNIQUE NOT NULL,
	PASSWORD VARCHAR(256) NOT NULL,
	USERNAME VARCHAR(256) NOT NULL,
	INSERTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ACCOUNT_ADDRESS
(
        ACCOUNT_ID UUID REFERENCES ACCOUNT(ID) NOT NULL,
        ADDRESS_ID UUID REFERENCES ADDRESS(ID) NOT NULL
);

CREATE TYPE CATEGORY AS ENUM ('VESTUARIO', 'ELETRONICOS', 'COSMETICOS', 'PETS', 'LIVRARIA')

CREATE TABLE STORE
(
	ID UUID PRIMARY KEY,
	NAME VARCHAR(256) UNIQUE NOT NULL,
	DESCRIPTION VARCHAR(256),
        -- ADDRESS_ID UUID REFERENCES ADDRESS(ID) NOT NULL,	
	TELEPHONE VARCHAR(256) UNIQUE NOT NULL,
	CATEGORY CATEGORY NOT NULL,
	OWNER_ID UUID REFERENCES ACCOUNT(ID) UNIQUE NOT NULL,
	INSERTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE PRODUCT
(
	ID UUID PRIMARY KEY,
	NAME VARCHAR(256) NOT NULL,
	DESCRIPTION VARCHAR(256) NOT NULL,
        PRICE NUMERIC(10, 2) NOT NULL,
        STORE_ID UUID REFERENCES STORE(ID),
	INSERTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE INVENTORY
(
        PRODUCT_ID UUID NOT NULL REFERENCES PRODUCT(ID),
        QUANTITY INTEGER NOT NULL DEFAULT 0,
        PRIMARY KEY (PRODUCT_ID)
);

CREATE OR REPLACE FUNCTION update_modified_column()
RETURNS TRIGGER AS $$
BEGIN
NEW.updated_at = now();
RETURN NEW;
END;
$$ language 'plpgsql';

CREATE TRIGGER update_modified_time BEFORE UPDATE ON ACCOUNT FOR EACH ROW EXECUTE PROCEDURE update_modified_column();
CREATE TRIGGER update_modified_time BEFORE UPDATE ON STORE FOR EACH ROW EXECUTE PROCEDURE update_modified_column();
CREATE TRIGGER update_modified_time BEFORE UPDATE ON PRODUCT FOR EACH ROW EXECUTE PROCEDURE update_modified_column();


CREATE TYPE STATUS AS ENUM ('ESPERANDO', 'ACEITO', 'RECUSADO', 'PREPARACAO', 'ROTA', 'CONCLUIDO', 'CANCELADO')
CREATE TYPE PAYMENT AS ENUM ('CC', 'CD', 'PIX', 'DINHEIRO')

CREATE TABLE ORDERS
(
        ID UUID PRIMARY KEY,
        ACCOUNT_ID UUID REFERENCES ACCOUNT(ID) NOT NULL,
        STORE_ID UUID REFERENCES STORE(ID) NOT NULL,
        ADDRESS_ID UUID REFERENCES ADDRESS(ID) NOT NULL,
        TOTAL NUMERIC(10, 2) NOT NULL,
        STATUS_ORDER STATUS NOT NULL DEFAULT 'ESPERANDO',
        PAYMENT_METHOD PAYMENT NOT NULL,
        INSERTED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE ORDER_PRODUCT
(
    ORDER_ID   UUID NOT NULL REFERENCES ORDERS(ID),
    PRODUCT_ID UUID NOT NULL REFERENCES PRODUCT(ID),
    QUANTITY   INTEGER NOT NULL CHECK (QUANTITY > 0),
    PRIMARY KEY (ORDER_ID, PRODUCT_ID)
);

